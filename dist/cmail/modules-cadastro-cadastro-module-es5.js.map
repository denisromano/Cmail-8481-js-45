{"version":3,"sources":["./src/app/modules/cadastro/cadastro.component.html","./src/app/models/dto/UserInputDTO.ts","./src/app/modules/cadastro/cadastro-routing.module.ts","./src/app/modules/cadastro/cadastro.component.ts","./src/app/modules/cadastro/cadastro.module.ts","./src/app/service/cadastro.service.ts"],"names":[],"mappings":"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","file":"modules-cadastro-cadastro-module-es5.js","sourcesContent":["module.exports = \"<div class=\\\"mdl-layout mdl-js-layout mdl-layout--fixed-drawer mdl-layout--fixed-header\\\">\\n  <cmail-header></cmail-header>\\n  <main class=\\\"mdl-layout__content\\\">\\n    <div class=\\\"page-content\\\">\\n      <p *ngIf=\\\"mensagem\\\">\\n      {{mensagem}}\\n      </p>\\n      <div class=\\\"mdl-grid\\\">\\n        <form [formGroup]=\\\"formCadastro\\\" (ngSubmit)=\\\"handleCadastro()\\\">\\n          <!--NOME-->\\n          <cmail-form-group idCampo = \\\"nome\\\" textoDaLabel = \\\"Nome\\\" [isInvalid]=\\\"nome.invalid && nome.touched\\\">\\n            <input formControlName=\\\"nome\\\" required type=\\\"text\\\" name=\\\"nome\\\" cmailFormField>\\n            \\n            <span *ngIf=\\\"nome.getError('required')\\\" class=\\\"mdl-textfield__error\\\">Informar um nome é obrigatório!</span>\\n            <span *ngIf=\\\"nome.getError('minlength')\\\" class=\\\"mdl-textfield__error\\\">\\n              O nome deve conter \\n              {{nome.getError('minlength').requiredLength}} caracteres\\n            </span>\\n            <span *ngIf=\\\"nome.getError('maxlength')\\\" class=\\\"mdl-textfield__error\\\">\\n              O nome deve conter \\n              {{nome.getError('maxlength').requiredLenght}} caracteres\\n            </span>\\n            <span *ngIf=\\\"nome.getError('pattern') && !nome.getError('minlength') && !nome.getError('maxlength')\\\" class=\\\"mdl-textfield__error\\\">O campo deve conter apenas letras</span>\\n          </cmail-form-group>\\n\\n          <!--USERNAME-->\\n          <cmail-form-group idCampo = \\\"username\\\" textoDaLabel = \\\"Nome de Usuario\\\" [isInvalid]=\\\"username.invalid && username.touched\\\">\\n              <input formControlName=\\\"username\\\" required type=\\\"text\\\" name=\\\"username\\\" cmailFormField>\\n              <span *ngIf=\\\"username.getError('required')\\\" \\n                class=\\\"mdl-textfield__error\\\">Informar um username é obrigatório!\\n              </span>\\n            <span *ngIf=\\\"username.getError('minlength')\\\" class=\\\"mdl-textfield__error\\\">\\n              O username deve conter \\n              {{username.getError('minlength').requiredLength}} caracteres\\n            </span>\\n            <span *ngIf=\\\"username.getError('maxlength')\\\" class=\\\"mdl-textfield__error\\\">\\n              O username deve conter \\n              {{username.getError('maxlength').requiredLenght}} caracteres\\n              </span>\\n            <span *ngIf=\\\"username.getError('pattern') && !username.getError('minlength') && !username.getError('maxlength')\\\" class=\\\"mdl-textfield__error\\\">O campo deve conter apenas letras</span>\\n          </cmail-form-group> \\n            \\n          <!--SENHA-->\\n          <cmail-form-group idCampo = \\\"senha\\\" textoDaLabel = \\\"Senha\\\" [isInvalid]=\\\"senha.invalid && senha.touched\\\">\\n              <input formControlName=\\\"senha\\\" required type=\\\"password\\\" name=\\\"senha\\\" cmailFormField>\\n              <span *ngIf=\\\"senha.getError('required')\\\" \\n                class=\\\"mdl-textfield__error\\\">Informar um senha é obrigatório!</span>\\n            <span *ngIf=\\\"senha.getError('minlength')\\\" class=\\\"mdl-textfield__error\\\">\\n              O senha deve conter \\n              {{senha.getError('minlength').requiredLength}} caracteres\\n            </span>\\n            <span *ngIf=\\\"senha.getError('maxlength')\\\" class=\\\"mdl-textfield__error\\\">\\n              O senha deve conter \\n              {{senha.getError('maxlength').requiredLenght}} caracteres\\n            </span>\\n            <span *ngIf=\\\"senha.getError('pattern') && !senha.getError('minlength') && !senha.getError('maxlength')\\\" \\n               class=\\\"mdl-textfield__error\\\">O campo deve conter apenas letras\\n            </span>\\n          </cmail-form-group>            \\n\\n          <!--TELEFONE-->\\n          <cmail-form-group idCampo = \\\"telefone\\\" textoDaLabel = \\\"Telefone\\\" [isInvalid]=\\\"telefone.invalid && telefone.touched\\\">\\n            <input minlength=\\\"8\\\" maxlength=\\\"9\\\" formControlName=\\\"telefone\\\" required type=\\\"text\\\" name=\\\"telefone\\\" cmailFormField>\\n            <span *ngIf=\\\"telefone.getError('required')\\\" \\n            class=\\\"mdl-textfield__error\\\">Informar um telefone é obrigatório!</span>\\n            <span *ngIf=\\\"telefone.getError('minlength') && telefone.getError('pattern')\\\" class=\\\"mdl-textfield__error\\\">\\n              O telefone deve conter \\n              {{telefone.getError('minlength').requiredLength}} caracteres\\n            </span>\\n            <span *ngIf=\\\"telefone.getError('maxlength') && telefone.getError('pattern')\\\" class=\\\"mdl-textfield__error\\\">\\n              O telefone deve conter \\n              {{telefone.getError('maxlength').requiredLenght}} caracteres\\n            </span>\\n            <span *ngIf=\\\"telefone.getError('pattern') && !telefone.getError('minlength') && !telefone.getError('maxlength')\\\" class=\\\"mdl-textfield__error\\\">O campo deve conter apenas numeros</span>\\n        </cmail-form-group> \\n\\n        <!--AVATAR-->\\n          <cmail-form-group idCampo = \\\"avatar\\\" textoDaLabel = \\\"Avatar\\\" [isInvalid]=\\\"avatar.invalid && avatar.touched\\\">\\n              <input formControlName=\\\"avatar\\\" required type=\\\"text\\\" name=\\\"avatar\\\" cmailFormField>\\n              <span *ngIf=\\\"avatar.getError('required')\\\" \\n              class=\\\"mdl-textfield__error\\\">Informar um avatar é obrigatório!\\n              </span>\\n              <span *ngIf=\\\"avatar.getError('urlInvalida')\\\" \\n              class=\\\"mdl-textfield__error\\\">Esta url não é valida!\\n              </span>\\n              <span *ngIf=\\\"avatar.status == 'PENDING'\\\" \\n              class=\\\"mdl-textfield__error mdl-textfield__checking\\\"> Verificando....\\n              </span>\\n              <span *ngIf=\\\"avatar.status == 'VALID'\\\" \\n              class=\\\"mdl-textfield__error mdl-textfield__valid\\\">Imagem valida!\\n              </span>\\n          </cmail-form-group>\\n\\n          <div class=\\\"mdl-card__actions\\\">\\n            <button class=\\\"mdl-button mdl-js-button mdl-button--raised mdl-button--accent\\\">\\n              Cadastrar\\n            </button>\\n          </div>\\n\\n        </form>\\n      </div>\\n    </div>\\n  </main>\\n</div>\\n\"","\nexport class UserInputDTO {\n    name = \"\"; \n    username = \"\";\n    phone = \"\";\n    password = \"\";\n    avatar = \"\";\n\n    constructor({nome, username, telefone, senha, avatar}){\n        this.name = nome;\n        this.username = username;\n        this.phone = telefone;\n        this.password = senha;\n        this.avatar = avatar;\n    }\n\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CadastroComponent } from './cadastro.component';\n\n\nconst routes: Routes = [\n  {\n    path: ''\n    , component: CadastroComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class CadastroRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport { HttpClient, HttpErrorResponse, HttpResponseBase } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { map, catchError } from \"rxjs/operators\";\nimport { CadastroService } from 'src/app/service/cadastro.service';\n\n\n@Component({\n  selector: 'cmail-cadastro',\n  templateUrl: './cadastro.component.html',\n  styles: []\n})\nexport class CadastroComponent implements OnInit {\n\n  private validadoresNome = Validators.compose([\n    Validators.required,\n    Validators.minLength(2),\n    Validators.maxLength(255),\n    Validators.pattern('[a-zA-Z\\u00C0-\\u00FF ]+')\n  ]);\n\n  private validadoresUserName = Validators.compose([\n    Validators.required,\n    Validators.minLength(2),\n    Validators.maxLength(255),\n    Validators.pattern('[a-z0-9]+')\n  ]);\n\n  private validadoresSenha = Validators.compose([\n    Validators.required,\n    Validators.minLength(6),\n    Validators.maxLength(255)\n  ]);\n\n  private validadoresTelefone = Validators.compose([\n    Validators.required,\n    Validators.minLength(8),\n    Validators.maxLength(9),\n    Validators.pattern(/^\\d{8,9}$/)\n  ]);\n\n  public nome = new FormControl('', this.validadoresNome);\n  public username = new FormControl('', this.validadoresUserName);\n  public senha = new FormControl('', this.validadoresSenha);\n  public telefone = new FormControl('', this.validadoresTelefone);\n  public avatar = new FormControl('', Validators.required, this.validaImagem.bind(this));\n\n  formCadastro = new FormGroup({\n    nome: this.nome,\n    username: this.username,\n    senha: this.senha,\n    telefone: this.telefone,\n    avatar: this.avatar\n  })\n\n  mensagem = '';\n\n  constructor(private httpRequest: HttpClient\n              ,private service: CadastroService\n              ,private roteador: Router) { }\n\n  ngOnInit() {\n  }\n\n  validaImagem(campo: FormControl){\n\n    const erroValidacao = {\n      urlInvalida: true\n    }\n\n    return this.httpRequest.head(\n      campo.value,\n      {\n        observe: 'response'\n      }\n    )\n    .pipe(\n        map((resposta: HttpResponseBase) => {\n\n          const contentType = resposta.headers.get('Content-Type');\n\n          if(resposta.ok && contentType.includes('image')) {\n            return null; // null quer dizer que nao erros de validacao\n          } else {\n            return erroValidacao\n          }\n          //se status ok, retorna null, senao retornar obj\n        })\n        ,catchError(() => {\n          return [erroValidacao]\n        })\n      )\n  }\n\n  handleCadastro(){\n\n    if(this.formCadastro.invalid) {\n      return this.formCadastro.markAllAsTouched();\n    }\n    \n    //const userDTO = new UserInputDTO(this.formCadastro.value);\n\n    //this.httpRequest.post('http://localhost:3200/users',userDTO)\n    this.service.cadastrar(this.formCadastro.value)\n    .subscribe(\n      (resposta) => {\n        console.log(resposta);\n        this.mensagem = \"Cadastro feito com sucesso!!!\"\n        this.formCadastro.reset();\n      }\n      ,(erro: HttpErrorResponse) => {\n        this.mensagem = erro.error.body[0].message\n      }\n      , () => {\n        setTimeout(() => {\n          this.roteador.navigate(['login']);\n        }, 3000)\n      }\n    );\n    \n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CadastroComponent } from './cadastro.component';\nimport { SharedComponentsModule } from 'src/app/components/shared-components.module';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CadastroRoutingModule } from './cadastro-routing.module';\nimport { CadastroService } from 'src/app/service/cadastro.service';\n\n\n\n@NgModule({\n  declarations: [CadastroComponent],\n  imports: [\n    CommonModule,\n    SharedComponentsModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    CadastroRoutingModule\n  ],\n  exports: [CadastroComponent],\n  providers: [CadastroService]\n})\nexport class CadastroModule { }\n","import { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { UserInputDTO } from '../models/dto/UserInputDTO';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CadastroService {\n\n    private url = environment.api+'users/';\n\n    constructor(private http: HttpClient) {}\n\n    cadastrar (cadastroData) {\n        const userInputDTO = new UserInputDTO(cadastroData);\n\n        return this.http\n            .post(this.url, userInputDTO)\n    }\n\n}"],"sourceRoot":"webpack:///"}